trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa 

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/app_infra'
          artifact: 'app_infra-out'
          publishLocation: 'pipeline' 
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/app_infra'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-test-conn'
          ensureBackend: true
          backendAzureRmResourceGroupName: 'cloud-shell-storage-centralindia'
          backendAzureRmResourceGroupLocation: 'Central India'
          backendAzureRmStorageAccountName: 'csg100320006f583690'
          backendAzureRmStorageAccountSku: 'Locally-redundant storage (LRS)'
          backendAzureRmContainerName: 'terraformstate'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/app_infra'
          allowTelemetryCollection: false
- stage: DeployAKSCluster
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: Deploy AKS cluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)
      strategy:
        runOnce:
          deploy:
           steps:
            - task: DownloadSecureFile@1
              name: sshkey
              displayName: Download SSH Key
              inputs:
                secureFile: 'id_rsa.pub'

            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/app_infra-out'
                backendType: 'azurerm'
                backendServiceArm: 'terraform-test-conn'
                backendAzureRmResourceGroupName: 'cloud-shell-storage-centralindia'
                backendAzureRmStorageAccountName: 'csg100320006f583690'
                backendAzureRmContainerName: 'terraformstate'
                backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/app_infra-out'
                environmentServiceName: 'terraform-test-conn'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -out $(Pipeline.Workspace)/app_infra-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/app_infra-out'
                environmentServiceName: 'terraform-test-conn'
                commandOptions: '$(Pipeline.Workspace)/app_infra-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false